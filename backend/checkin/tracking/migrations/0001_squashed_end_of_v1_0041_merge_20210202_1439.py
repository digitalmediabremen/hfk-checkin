# Generated by Django 3.1.7 on 2021-03-15 16:48

import checkin.tracking.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_better_admin_arrayfield.models.fields
import mptt.fields
import simple_history.models


class Migration(migrations.Migration):

    replaces = [('tracking', '0001_initial'), ('tracking', '0002_auto_20201009_0043'), ('tracking', '0003_profile_last_checkin'), ('tracking', '0004_auto_20201009_0059'), ('tracking', '0005_auto_20201009_0106'), ('tracking', '0006_auto_20201009_0143'), ('tracking', '0007_auto_20201009_2129'), ('tracking', '0008_auto_20201010_0242'), ('tracking', '0009_auto_20201010_0331'), ('tracking', '0010_auto_20201010_0423'), ('tracking', '0011_auto_20201010_0530'), ('tracking', '0012_auto_20201011_1722'), ('tracking', '0013_auto_20201011_2301'), ('tracking', '0014_auto_20201013_1337'), ('tracking', '0015_auto_20201013_1341'), ('tracking', '0016_auto_20201013_1554'), ('tracking', '0017_auto_20201013_1559'), ('tracking', '0018_auto_20201013_1603'), ('tracking', '0019_auto_20201013_1605'), ('tracking', '0020_auto_20201013_2111'), ('tracking', '0021_auto_20201014_1515'), ('tracking', '0022_auto_20201015_1138'), ('tracking', '0023_auto_20201015_1254'), ('tracking', '0024_location_hide_load'), ('tracking', '0025_auto_20201015_2035'), ('tracking', '0026_auto_20201016_1405'), ('tracking', '0027_auto_20201023_1333'), ('tracking', '0028_historicalprofile'), ('tracking', '0029_auto_20201023_1357'), ('tracking', '0030_auto_20201023_1438'), ('tracking', '0031_auto_20201028_1730'), ('tracking', '0032_historicallocation'), ('tracking', '0033_auto_20201104_1645'), ('tracking', '0034_auto_20201107_0044'), ('tracking', '0035_auto_20201113_1620'), ('tracking', '0036_auto_20201118_1411'), ('tracking', '0037_add_matrikelnummer'), ('tracking', '0038_auto_20210111_0146'), ('tracking', '0039_papercheckin_paperlog'), ('tracking', '0040_auto_20210202_1426'), ('tracking', '0037_auto_20210120_1929'), ('tracking', '0041_merge_20210202_1439')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=1000, verbose_name='Vorname')),
                ('last_name', models.CharField(max_length=1000, verbose_name='Nachname')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Die Telefonnummer benötigt das Format +(XX) XXXXXXXXXXX.', regex='^\\+?1?[\\d ()]{9,15}$')], verbose_name='Telefonnummer')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-Mail Adresse')),
                ('verified', models.BooleanField(blank=True, default=False, null=True, verbose_name='Identität geprüft')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Letzte Änderung')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrierung')),
                ('user', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'Personen',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default=checkin.tracking.models.pkgen, max_length=4, unique=True, verbose_name='Raumcode')),
                ('org_number', models.CharField(blank=True, help_text='Speicher XI: X.XX.XXX / Dechanatstraße: K.XX', max_length=30, verbose_name='Raumnummer')),
                ('org_name', models.CharField(blank=True, max_length=255, verbose_name='Raumname / Standort')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tracking.location', verbose_name='Teil von')),
            ],
            options={
                'verbose_name': 'Raum / Standort',
                'verbose_name_plural': 'Räume / Standorte',
            },
        ),
        migrations.CreateModel(
            name='ActivityProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_de', models.CharField(max_length=255, verbose_name='Bezeichnung DE')),
                ('distance_rule_de', models.CharField(blank=True, default='1,5 m', max_length=50, null=True, verbose_name='Mindestabstand DE')),
                ('other_rules_de', models.TextField(blank=True, null=True, verbose_name='Regeln, Sonstige Maßnahmen DE')),
                ('description_de', models.TextField(default='no translation', verbose_name='Beschreibung DE')),
                ('description_en', models.TextField(default='no translation', verbose_name='Beschreibung EN')),
                ('distance_rule_en', models.CharField(blank=True, default='1,5 m', max_length=50, null=True, verbose_name='Mindestabstand EN')),
                ('name_en', models.CharField(max_length=255, verbose_name='Bezeichnung EN')),
                ('other_rules_en', models.TextField(blank=True, null=True, verbose_name='Regeln, Sonstige Maßnahmen EN')),
            ],
            options={
                'verbose_name': 'Aktivitätsprofil',
                'verbose_name_plural': 'Aktivitätsprofile',
            },
        ),
        migrations.CreateModel(
            name='CapacityForActivityProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.PositiveIntegerField(verbose_name='Maximalkapazität')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracking.location', verbose_name='Standort')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracking.activityprofile', verbose_name='Profil')),
                ('comment_de', models.CharField(blank=True, max_length=40, null=True, verbose_name='Zusatz DE')),
                ('comment_en', models.CharField(blank=True, max_length=40, null=True, verbose_name='Zusatz EN')),
            ],
            options={
                'verbose_name': 'Aktivitätsprofil und Kapzitäten',
                'verbose_name_plural': 'Aktivitätsprofile und Kapzitäten',
            },
        ),
        migrations.AddField(
            model_name='location',
            name='org_activities',
            field=models.ManyToManyField(through='tracking.CapacityForActivityProfile', to='tracking.ActivityProfile', verbose_name='Aktivitätsprofile und Kapazitäten'),
        ),
        migrations.AddField(
            model_name='location',
            name='org_capacity_comment',
            field=models.TextField(blank=True, null=True, verbose_name='Bemerkung zur Nutzung / Kapazität'),
        ),
        migrations.AddField(
            model_name='location',
            name='org_responsible',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Raumverantwortliche(r)'),
        ),
        migrations.AlterField(
            model_name='location',
            name='org_name',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Raumname / Standort'),
        ),
        migrations.CreateModel(
            name='BookingMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Bezeichnung')),
            ],
            options={
                'verbose_name': 'Buchungsmethode',
                'verbose_name_plural': 'Buchungsmethoden',
            },
        ),
        migrations.CreateModel(
            name='LocationUsage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Bezeichnung')),
            ],
            options={
                'verbose_name': 'Raumnutzungsart',
                'verbose_name_plural': 'Raumnutzungsarten',
            },
        ),
        migrations.AddField(
            model_name='location',
            name='org_bookable',
            field=models.BooleanField(default=False, verbose_name='Buchbar / Reservierbar'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='location',
            name='org_comment',
            field=models.TextField(blank=True, null=True, verbose_name='Anmerkungen'),
        ),
        migrations.AddField(
            model_name='location',
            name='org_book_via',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tracking.bookingmethod', verbose_name='Buchung via'),
        ),
        migrations.AddField(
            model_name='location',
            name='org_usage',
            field=models.ManyToManyField(blank=True, to='tracking.LocationUsage', verbose_name='Nutzungsarten'),
        ),
        migrations.AddField(
            model_name='location',
            name='org_size',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Größe in Quadratmetern'),
        ),
        migrations.AlterField(
            model_name='location',
            name='org_name',
            field=models.CharField(max_length=255, verbose_name='Raumname / Standort'),
        ),
        migrations.AddField(
            model_name='location',
            name='hide_load',
            field=models.BooleanField(default=False, verbose_name='Checkins verstecken'),
        ),
        migrations.AddField(
            model_name='location',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Letzte Änderung'),
        ),
        migrations.AlterField(
            model_name='location',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, default=3, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tracking.location', verbose_name='Teil von'),
        ),
        migrations.AlterModelOptions(
            name='location',
            options={'permissions': [('can_print_location', 'Kann PDF-Raumausweise erstellen.'), ('can_display_location_loads', 'Kann aktuelle aktuelle Checkins anzeigen.')], 'verbose_name': 'Raum / Standort', 'verbose_name_plural': 'Räume / Standorte'},
        ),
        migrations.CreateModel(
            name='HistoricalProfile',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('first_name', models.CharField(max_length=1000, verbose_name='Vorname')),
                ('last_name', models.CharField(max_length=1000, verbose_name='Nachname')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Die Telefonnummer benötigt das Format +(XX) XXXXXXXXXXX.', regex='^\\+?1?[\\d ()]{9,15}$')], verbose_name='Telefonnummer')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-Mail Adresse')),
                ('verified', models.BooleanField(blank=True, default=False, null=True, verbose_name='Identität geprüft')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Letzte Änderung')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Registrierung')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Person',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AlterField(
            model_name='location',
            name='org_size',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='in Quadratmetern', max_digits=8, null=True, verbose_name='Größe'),
        ),
        migrations.CreateModel(
            name='Checkin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_entered', models.DateTimeField(auto_now_add=True, verbose_name='Checkin')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tracking.location', verbose_name='Standort')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tracking.profile', verbose_name='Person')),
                ('time_left', models.DateTimeField(blank=True, null=True, verbose_name='Checkout')),
                ('origin_entered', models.CharField(blank=True, choices=[('QR_SCAN', 'Scan eines QR-Codes'), ('USER_MANUAL', 'Manuelle Eingabe durch Nutzer'), ('ADMIN_MANUAL', 'Manuelle Eingabe durch Betreiber'), ('FOREIGN_SCAN', 'Scan eines QR-Codes durch andere Person'), ('PARENT_CHECKIN', 'Checkin durch untergeordnetes Objekt'), ('PARENT_CHECKOUT', 'Checkout durch übergeordnetes Objekt'), ('IMPORT', 'Import')], max_length=100, null=True, verbose_name='Datenquelle Checkin')),
                ('origin_left', models.CharField(blank=True, choices=[('QR_SCAN', 'Scan eines QR-Codes'), ('USER_MANUAL', 'Manuelle Eingabe durch Nutzer'), ('ADMIN_MANUAL', 'Manuelle Eingabe durch Betreiber'), ('FOREIGN_SCAN', 'Scan eines QR-Codes durch andere Person'), ('PARENT_CHECKIN', 'Checkin durch untergeordnetes Objekt'), ('PARENT_CHECKOUT', 'Checkout durch übergeordnetes Objekt'), ('IMPORT', 'Import')], max_length=100, null=True, verbose_name='Datenquelle Checkout')),
            ],
            options={
                'verbose_name': 'Checkin',
                'ordering': ('-time_entered',),
            },
        ),
        migrations.AddConstraint(
            model_name='checkin',
            constraint=models.CheckConstraint(check=models.Q(('origin_entered__in', ['QR_SCAN', 'USER_MANUAL', 'ADMIN_MANUAL', 'FOREIGN_SCAN', 'PARENT_CHECKIN', 'PARENT_CHECKOUT', 'IMPORT']), ('origin_left__in', ['QR_SCAN', 'USER_MANUAL', 'ADMIN_MANUAL', 'FOREIGN_SCAN', 'PARENT_CHECKIN', 'PARENT_CHECKOUT', 'IMPORT'])), name='tracking_checkin_origins_valid'),
        ),
        migrations.AddField(
            model_name='location',
            name='removed',
            field=models.BooleanField(default=False, help_text='Diese Raum ist deaktiviert oder entfernt. Eine Löschung ist jedoch noch nicht möglich, weil noch Checkins am Raum hängen. (Soft-Delete)', verbose_name='Entfernt'),
        ),
        migrations.AlterField(
            model_name='location',
            name='org_number',
            field=models.CharField(blank=True, help_text='Speicher XI: X.XX.XXX / Dechanatstraße: K.XX', max_length=24, verbose_name='Raumnummer'),
        ),
        migrations.AlterModelOptions(
            name='checkin',
            options={'ordering': ('-time_entered',), 'permissions': [('can_evaluate_case', 'Kann Nachverfolgung durchführen')], 'verbose_name': 'Checkin'},
        ),
        migrations.AlterModelOptions(
            name='location',
            options={'permissions': [('can_print_location', 'Kann PDF-Raumausweise erstellen'), ('can_display_location_loads', 'Kann aktuelle aktuelle Checkins anzeigen')], 'verbose_name': 'Raum / Standort', 'verbose_name_plural': 'Räume / Standorte'},
        ),
        migrations.AlterModelOptions(
            name='profile',
            options={'permissions': [('can_view_all_users', 'Kann alle Personen anzeigen')], 'verbose_name': 'Person', 'verbose_name_plural': 'Personen'},
        ),
        migrations.AddField(
            model_name='historicalprofile',
            name='student_number',
            field=models.CharField(blank=True, max_length=20, null=True, verbose_name='Matrikelnummer'),
        ),
        migrations.AddField(
            model_name='profile',
            name='student_number',
            field=models.CharField(blank=True, max_length=20, null=True, verbose_name='Matrikelnummer'),
        ),
        migrations.AlterModelManagers(
            name='checkin',
            managers=[
                ('all', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterField(
            model_name='checkin',
            name='time_entered',
            field=models.DateTimeField(default=datetime.datetime.now, verbose_name='Checkin'),
        ),
        migrations.CreateModel(
            name='PaperLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='Vorname')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='Nachname')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Telefonnummer')),
                ('student_number', models.CharField(blank=True, max_length=20, verbose_name='Matrikelnummer')),
                ('date', models.DateField(help_text='Ohne Datum ist die Eingabe und Kontaktnachverfolgung nicht möglich. Bitte stellen Sie anderweitig Nachforschungen an, falls das Datum fehlt oder unlesbar ist, und wiederholen Sie dann die Eingabe.<br/>Alle Zeitangaben werden in Ihrer Zeitzone (Europe/Berlin) interpretiert.', verbose_name='Datum')),
                ('signed', models.BooleanField(verbose_name='Unterschrift vorhanden')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Eingegeben am')),
                ('comment', models.TextField(blank=True, help_text='Nutzen die dieses Feld für alle weiteren Bemerkugen zum vorliegenden Papierprotokoll oder zu Ihrer Eingabe.', null=True, verbose_name='Eingabekommentar')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracking.profile', verbose_name='Person')),
            ],
            options={
                'verbose_name': 'Papierprotokoll',
                'verbose_name_plural': 'Papierprotokolle',
            },
        ),
        migrations.CreateModel(
            name='PaperCheckin',
            fields=[
                ('checkin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tracking.checkin')),
                ('location_comment', models.CharField(blank=True, max_length=255, verbose_name='persönliche Referenz')),
                ('entered_after_midnight', models.BooleanField(blank=True, verbose_name='Eingang nach 23:59 (Folgetag)')),
                ('left_after_midnight', models.BooleanField(blank=True, verbose_name='Ausgang nach 23:59 (Folgetag)')),
                ('log', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='tracking.paperlog')),
            ],
            options={
                'verbose_name': 'Aufenthalt (per Papierprotokoll)',
                'verbose_name_plural': 'Aufenthalte (per Papierprotokoll)',
                'ordering': ('pk',),
            },
            bases=('tracking.checkin',),
            managers=[
                ('all', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='org_alternative_name',
            field=django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None, verbose_name='Alternative Bezeichnungen'),
        ),
        migrations.AddField(
            model_name='location',
            name='org_floor_number',
            field=models.IntegerField(blank=True, help_text='-1: Keller, 0: Erdgeschoss, 1: Erste Etage, usw.', null=True, verbose_name='Etage'),
        ),
        migrations.CreateModel(
            name='HistoricalLocation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code', models.CharField(db_index=True, default=checkin.tracking.models.pkgen, max_length=4, verbose_name='Raumcode')),
                ('org_number', models.CharField(blank=True, help_text='Speicher XI: X.XX.XXX / Dechanatstraße: X.XX(x) Mehrere Raumnummern mit / trennen.', max_length=24, verbose_name='Raumnummer')),
                ('org_name', models.CharField(help_text='Bezeichung laut Raumschild.', max_length=255, verbose_name='Raumname / Standort')),
                ('org_responsible', models.CharField(blank=True, max_length=255, null=True, verbose_name='Raumverantwortliche(r)')),
                ('org_size', models.DecimalField(blank=True, decimal_places=2, help_text='in Quadratmetern', max_digits=8, null=True, verbose_name='Größe')),
                ('org_comment', models.TextField(blank=True, null=True, verbose_name='Anmerkungen')),
                ('org_capacity_comment', models.TextField(blank=True, null=True, verbose_name='Bemerkung zur Nutzung / Kapazität')),
                ('org_bookable', models.BooleanField(verbose_name='Buchbar / Reservierbar')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Letzte Änderung')),
                ('hide_load', models.BooleanField(default=False, verbose_name='Checkins verstecken')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('org_book_via', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tracking.bookingmethod', verbose_name='Buchung via')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, db_constraint=False, default=260, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tracking.location', verbose_name='Teil von')),
                ('removed', models.BooleanField(default=False, help_text='Diese Raum ist deaktiviert oder entfernt. Eine Löschung ist jedoch noch nicht möglich, weil noch Checkins am Raum hängen. (Soft-Delete)', verbose_name='Entfernt')),
                ('org_alternative_name', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None, verbose_name='Alternative Bezeichnungen')),
                ('org_floor_number', models.IntegerField(blank=True, help_text='-1: Keller, 0: Erdgeschoss, 1: Erste Etage, usw.', null=True, verbose_name='Etage')),
            ],
            options={
                'verbose_name': 'historical Raum / Standort',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AlterField(
            model_name='location',
            name='org_name',
            field=models.CharField(help_text='Bezeichung laut Raumschild.', max_length=255, verbose_name='Raumname / Standort'),
        ),
        migrations.AlterField(
            model_name='location',
            name='org_number',
            field=models.CharField(blank=True, help_text='Speicher XI: X.XX.XXX / Dechanatstraße: X.XX(x) Mehrere Raumnummern mit / trennen.', max_length=24, verbose_name='Raumnummer'),
        ),
        migrations.AlterField(
            model_name='location',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, default=260, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tracking.location', verbose_name='Teil von'),
        ),
    ]
