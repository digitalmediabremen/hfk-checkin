# Generated by Django 3.1.5 on 2021-02-21 16:18

from django.db import migrations
from django.db import connection

class Migration(migrations.Migration):
    """
    Custom migration to swap USER_MODEL and move existing users to new app. (If users / old model did exist.)

    If table `auth_user` (default User model) exists:
    1) This migration (0001) will fake the second migration (0002).
    2) The second migration shall be skipped.
    3) The third migration will start to actually do things.

    If table `auth_user` does not exists, there are also no existing accounts.
    1) This migration will do nothing.
    2) 0002 will regularly execute and create the new table.
    """
    db_cursor = connection.cursor()
    check_exists_query = "SELECT relname FROM pg_class WHERE relname=%s;"
    original_auth_table = "auth_user"

    def mark_0002_as_applied_if_old_db_table_exists(apps, schema_editor):
        db_table = 'auth_user'
        check_exists_query = "SELECT relname FROM pg_class WHERE relname=%s;"
        db_cursor.execute(check_exists_query, [db_table])
        if db_cursor.fetchone():
            # mark 0002 as applied and move on with 0003
            migrations.RunSQL(
                "INSERT INTO django_migrations (app, name, applied) VALUES ('users', '0002_transfer_user_from_django_auth_to_users', CURRENT_TIMESTAMP)")
        else:
            pass
            # do nothing and move on regularly with 0002

    for table in tables:
        db_cursor.execute(check_exists_query, [table])
        result = db_cursor.fetchone()
        if result:
            existing_tables.append(table)

    operations = [
        migrations.RunSQL(base_query.format(table=existing_table)) for existing_table in existing_tables
    ]

    dependencies = [
    ]

    operations = [
        migrations.RunSQL("INSERT INTO django_migrations (app, name, applied) VALUES ('users', '0002_transfer_user_from_django_auth_to_users', CURRENT_TIMESTAMP)")
    ]
