# Generated by Django 3.1.5 on 2021-02-18 10:13

import checkin.resources.enums
import checkin.resources.models.unit
import datetime
from django.conf import settings
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import enumfields.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessibilityValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=128, unique=True, verbose_name='Accessibility summary value')),
                ('order', models.IntegerField(default=0, verbose_name='Ordering priority')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Time of modification')),
            ],
            options={
                'verbose_name': 'accessibility value',
                'verbose_name_plural': 'accessibility values',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='AccessibilityViewpoint',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('order_text', models.CharField(default='0', max_length=200, verbose_name='Reihenfolge')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Time of modification')),
            ],
            options={
                'verbose_name': 'accessibility viewpoint',
                'verbose_name_plural': 'accessibility viewpoints',
                'ordering': ('order_text',),
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('attachment_file', models.FileField(upload_to='attachment_files', verbose_name='File')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attachment_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attachment_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'equipment',
                'verbose_name_plural': 'equipment',
                'ordering': ('category', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Purpose',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('public', models.BooleanField(default=True, verbose_name='Public')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purpose_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purpose_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='resources.purpose', verbose_name='Parent')),
            ],
            options={
                'verbose_name': 'purpose',
                'verbose_name_plural': 'purposes',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('begin', models.DateTimeField(verbose_name='Begin time')),
                ('end', models.DateTimeField(verbose_name='End time')),
                ('duration', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, db_index=True, null=True, verbose_name='Length of reservation')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('state', models.CharField(choices=[('created', 'created'), ('cancelled', 'cancelled'), ('confirmed', 'confirmed'), ('denied', 'denied'), ('requested', 'requested'), ('waiting_for_payment', 'waiting for payment')], default='created', max_length=32, verbose_name='State')),
                ('staff_event', models.BooleanField(default=False, verbose_name='Is staff event')),
                ('type', models.CharField(choices=[('normal', 'Normal reservation'), ('blocked', 'Resource blocked')], default='normal', max_length=32, verbose_name='Type')),
                ('access_code', models.CharField(blank=True, max_length=32, null=True, verbose_name='Access code')),
                ('event_subject', models.CharField(blank=True, max_length=200, verbose_name='Event subject')),
                ('event_description', models.TextField(blank=True, verbose_name='Event description')),
                ('number_of_participants', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Number of participants')),
                ('participants', models.TextField(blank=True, verbose_name='Participants')),
                ('host_name', models.CharField(blank=True, max_length=100, verbose_name='Host name')),
                ('reservation_extra_questions', models.TextField(blank=True, verbose_name='Reservation extra questions')),
                ('reserver_name', models.CharField(blank=True, max_length=100, verbose_name='Reserver name')),
                ('reserver_id', models.CharField(blank=True, max_length=30, verbose_name='Reserver ID (business or person)')),
                ('reserver_email_address', models.EmailField(blank=True, max_length=254, verbose_name='Reserver email address')),
                ('reserver_phone_number', models.CharField(blank=True, max_length=30, verbose_name='Reserver phone number')),
                ('reserver_address_street', models.CharField(blank=True, max_length=100, verbose_name='Reserver address street')),
                ('reserver_address_zip', models.CharField(blank=True, max_length=30, verbose_name='Reserver address zip')),
                ('reserver_address_city', models.CharField(blank=True, max_length=100, verbose_name='Reserver address city')),
                ('company', models.CharField(blank=True, max_length=100, verbose_name='Company')),
                ('billing_first_name', models.CharField(blank=True, max_length=100, verbose_name='Billing first name')),
                ('billing_last_name', models.CharField(blank=True, max_length=100, verbose_name='Billing last name')),
                ('billing_email_address', models.EmailField(blank=True, max_length=254, verbose_name='Billing email address')),
                ('billing_phone_number', models.CharField(blank=True, max_length=30, verbose_name='Billing phone number')),
                ('billing_address_street', models.CharField(blank=True, max_length=100, verbose_name='Billing address street')),
                ('billing_address_zip', models.CharField(blank=True, max_length=30, verbose_name='Billing address zip')),
                ('billing_address_city', models.CharField(blank=True, max_length=100, verbose_name='Billing address city')),
                ('origin_id', models.CharField(editable=False, max_length=50, null=True, verbose_name='Original ID')),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_reservations', to=settings.AUTH_USER_MODEL, verbose_name='Approver')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservation_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservation_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
            ],
            options={
                'verbose_name': 'reservation',
                'verbose_name_plural': 'reservations',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ReservationMetadataField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=100, unique=True, verbose_name='Field name')),
            ],
            options={
                'verbose_name': 'Reservation metadata field',
                'verbose_name_plural': 'Reservation metadata fields',
            },
        ),
        migrations.CreateModel(
            name='ReservationMetadataSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservationmetadataset_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservationmetadataset_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
                ('required_fields', models.ManyToManyField(blank=True, related_name='metadata_sets_required', to='resources.ReservationMetadataField', verbose_name='Required fields')),
                ('supported_fields', models.ManyToManyField(related_name='metadata_sets_supported', to='resources.ReservationMetadataField', verbose_name='Supported fields')),
            ],
            options={
                'verbose_name': 'Reservation metadata set',
                'verbose_name_plural': 'Reservation metadata sets',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('public', models.BooleanField(default=True, verbose_name='Public')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('name_de', models.CharField(max_length=200, null=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=200, null=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_de', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('need_manual_confirmation', models.BooleanField(default=False, verbose_name='Need manual confirmation')),
                ('authentication', models.CharField(choices=[('none', 'None'), ('weak', 'Weak'), ('strong', 'Strong')], max_length=20, verbose_name='Authentication')),
                ('people_capacity', models.PositiveIntegerField(blank=True, null=True, verbose_name='People capacity')),
                ('area', models.PositiveIntegerField(blank=True, null=True, verbose_name='Area (m2)')),
                ('min_period', models.DurationField(default=datetime.timedelta(seconds=1800), verbose_name='Minimum reservation time')),
                ('max_period', models.DurationField(blank=True, null=True, verbose_name='Maximum reservation time')),
                ('slot_size', models.DurationField(default=datetime.timedelta(seconds=1800), verbose_name='Slot size for reservation time')),
                ('max_reservations_per_user', models.PositiveIntegerField(blank=True, null=True, verbose_name='Maximum number of active reservations per user')),
                ('reservable', models.BooleanField(default=False, verbose_name='Reservable')),
                ('reservation_info', models.TextField(blank=True, null=True, verbose_name='Reservation info')),
                ('reservation_info_de', models.TextField(blank=True, null=True, verbose_name='Reservation info')),
                ('reservation_info_en', models.TextField(blank=True, null=True, verbose_name='Reservation info')),
                ('responsible_contact_info', models.TextField(blank=True, verbose_name='Responsible contact info')),
                ('responsible_contact_info_de', models.TextField(blank=True, null=True, verbose_name='Responsible contact info')),
                ('responsible_contact_info_en', models.TextField(blank=True, null=True, verbose_name='Responsible contact info')),
                ('specific_terms', models.TextField(blank=True, verbose_name='Specific terms')),
                ('specific_terms_de', models.TextField(blank=True, null=True, verbose_name='Specific terms')),
                ('specific_terms_en', models.TextField(blank=True, null=True, verbose_name='Specific terms')),
                ('reservation_requested_notification_extra', models.TextField(blank=True, verbose_name='Extra content to "reservation requested" notification')),
                ('reservation_requested_notification_extra_de', models.TextField(blank=True, null=True, verbose_name='Extra content to "reservation requested" notification')),
                ('reservation_requested_notification_extra_en', models.TextField(blank=True, null=True, verbose_name='Extra content to "reservation requested" notification')),
                ('reservation_confirmed_notification_extra', models.TextField(blank=True, verbose_name='Extra content to "reservation confirmed" notification')),
                ('reservation_confirmed_notification_extra_de', models.TextField(blank=True, null=True, verbose_name='Extra content to "reservation confirmed" notification')),
                ('reservation_confirmed_notification_extra_en', models.TextField(blank=True, null=True, verbose_name='Extra content to "reservation confirmed" notification')),
                ('reservable_max_days_in_advance', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Reservable max. days in advance')),
                ('reservable_min_days_in_advance', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Reservable min. days in advance')),
                ('external_reservation_url', models.URLField(blank=True, help_text='A link to an external reservation system if this resource is managed elsewhere', null=True, verbose_name='External reservation URL')),
                ('attachments', models.ManyToManyField(blank=True, to='resources.Attachment', verbose_name='Attachments')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
                ('purposes', models.ManyToManyField(to='resources.Purpose', verbose_name='Purposes')),
                ('reservation_metadata_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='resources.reservationmetadataset', verbose_name='Reservation metadata set')),
            ],
            options={
                'verbose_name': 'resource',
                'verbose_name_plural': 'resources',
                'ordering': ('unit', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('name_de', models.CharField(max_length=200, null=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=200, null=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_de', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('time_zone', models.CharField(default=checkin.resources.models.unit._get_default_timezone, max_length=50, verbose_name='Time zone')),
                ('manager_email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='Manager email')),
                ('street_address', models.CharField(max_length=100, null=True, verbose_name='Street address')),
                ('street_address_de', models.CharField(max_length=100, null=True, verbose_name='Street address')),
                ('street_address_en', models.CharField(max_length=100, null=True, verbose_name='Street address')),
                ('address_zip', models.CharField(blank=True, max_length=10, null=True, verbose_name='Postal code')),
                ('phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Phone number')),
                ('email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='Email')),
                ('www_url', models.URLField(blank=True, max_length=400, null=True, verbose_name='WWW link')),
                ('www_url_de', models.URLField(blank=True, max_length=400, null=True, verbose_name='WWW link')),
                ('www_url_en', models.URLField(blank=True, max_length=400, null=True, verbose_name='WWW link')),
                ('address_postal_full', models.CharField(blank=True, max_length=100, null=True, verbose_name='Full postal address')),
                ('reservable_max_days_in_advance', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Reservable max. days in advance')),
                ('reservable_min_days_in_advance', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Reservable min. days in advance')),
                ('data_source', models.CharField(blank=True, default='', max_length=128, verbose_name='External data source')),
                ('data_source_hours', models.CharField(blank=True, default='', max_length=128, verbose_name='External data source for opening hours')),
                ('disallow_overlapping_reservations', models.BooleanField(default=False, verbose_name='Disallow overlapping reservations in this unit')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unit_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unit_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
            ],
            options={
                'verbose_name': 'unit',
                'verbose_name_plural': 'units',
                'ordering': ('name',),
                'permissions': [('unit:can_approve_reservation', 'Can approve reservation'), ('unit:can_make_reservations', 'Can make reservations'), ('unit:can_modify_reservations', 'Can modify reservations'), ('unit:can_ignore_opening_hours', 'Can make reservations outside opening hours'), ('unit:can_view_reservation_access_code', 'Can view reservation access code'), ('unit:can_view_reservation_extra_fields', 'Can view reservation extra fields'), ('unit:can_view_reservation_user', 'Can view reservation user'), ('unit:can_access_reservation_comments', 'Can access reservation comments'), ('unit:can_comment_reservations', 'Can create comments for a reservation'), ('unit:can_view_reservation_catering_orders', 'Can view reservation catering orders'), ('unit:can_modify_reservation_catering_orders', 'Can modify reservation catering orders'), ('unit:can_view_reservation_product_orders', 'Can view reservation product orders'), ('unit:can_modify_paid_reservations', 'Can modify paid reservations'), ('unit:can_bypass_payment', 'Can bypass payment for paid reservations'), ('unit:can_create_staff_event', 'Can create a reservation that is a staff event'), ('unit:can_create_special_type_reservation', 'Can create reservations of a non-normal type'), ('unit:can_bypass_manual_confirmation', 'Can bypass manual confirmation requirement for resources'), ('unit:can_create_reservations_for_other_users', 'Can create reservations for other registered users'), ('unit:can_create_overlapping_reservations', 'Can create overlapping reservations'), ('unit:can_ignore_max_reservations_per_user', 'Can ignore resources max reservations per user rule'), ('unit:can_ignore_max_period', 'Can ignore resources max period rule'), ('unit:can_set_custom_price_for_reservations', 'Can set custom price for individual reservations')],
            },
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('main_type', models.CharField(choices=[('space', 'Space'), ('person', 'Person'), ('item', 'Item')], max_length=20, verbose_name='Main type')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('name_de', models.CharField(max_length=200, null=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=200, null=True, verbose_name='Name')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcetype_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcetype_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
            ],
            options={
                'verbose_name': 'resource type',
                'verbose_name_plural': 'resource types',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ResourceGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('identifier', models.CharField(max_length=100, verbose_name='Identifier')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcegroup_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcegroup_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
                ('resources', models.ManyToManyField(blank=True, related_name='groups', to='resources.Resource', verbose_name='Resources')),
            ],
            options={
                'verbose_name': 'Resource group',
                'verbose_name_plural': 'Resource groups',
                'ordering': ('name',),
                'permissions': [('group:can_approve_reservation', 'Can approve reservation'), ('group:can_make_reservations', 'Can make reservations'), ('group:can_modify_reservations', 'Can modify reservations'), ('group:can_ignore_opening_hours', 'Can make reservations outside opening hours'), ('group:can_view_reservation_access_code', 'Can view reservation access code'), ('group:can_view_reservation_extra_fields', 'Can view reservation extra fields'), ('group:can_view_reservation_user', 'Can view reservation user'), ('group:can_access_reservation_comments', 'Can access reservation comments'), ('group:can_comment_reservations', 'Can create comments for a reservation'), ('group:can_view_reservation_catering_orders', 'Can view reservation catering orders'), ('group:can_modify_reservation_catering_orders', 'Can modify reservation catering orders'), ('group:can_view_reservation_product_orders', 'Can view reservation product orders'), ('group:can_modify_paid_reservations', 'Can modify paid reservations'), ('group:can_bypass_payment', 'Can bypass payment for paid reservations'), ('group:can_create_staff_event', 'Can create a reservation that is a staff event'), ('group:can_create_special_type_reservation', 'Can create reservations of a non-normal type'), ('group:can_bypass_manual_confirmation', 'Can bypass manual confirmation requirement for resources'), ('group:can_create_reservations_for_other_users', 'Can create reservations for other registered users'), ('group:can_create_overlapping_reservations', 'Can create overlapping reservations'), ('group:can_ignore_max_reservations_per_user', 'Can ignore resources max reservations per user rule'), ('group:can_ignore_max_period', 'Can ignore resources max period rule'), ('group:can_set_custom_price_for_reservations', 'Can set custom price for individual reservations')],
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='resources.resourcetype', verbose_name='Resource type'),
        ),
        migrations.AddField(
            model_name='resource',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='resources', to='resources.unit', verbose_name='Unit'),
        ),
        migrations.CreateModel(
            name='ReservationCancelReasonCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('reservation_type', models.CharField(choices=[('confirmed', 'Confirmed reservation'), ('requested', 'Requested reservation'), ('own', 'Own reservation')], default='confirmed', max_length=32, verbose_name='Reservation type')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservationcancelreasoncategory_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservationcancelreasoncategory_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
            ],
            options={
                'verbose_name': 'Reservation cancellation reason category',
                'verbose_name_plural': 'Reservation cancellation reason categories',
            },
        ),
        migrations.CreateModel(
            name='ReservationCancelReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='resources.reservationcancelreasoncategory')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservationcancelreason_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservationcancelreason_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
                ('reservation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cancel_reason', to='resources.reservation')),
            ],
            options={
                'verbose_name': 'Reservation cancellation reason',
                'verbose_name_plural': 'Reservation cancellation reasons',
            },
        ),
        migrations.AddField(
            model_name='reservation',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reservations', to='resources.resource', verbose_name='Resource'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(verbose_name='Start date')),
                ('end', models.DateField(verbose_name='End date')),
                ('name', models.CharField(blank=True, default='', max_length=200, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Description')),
                ('closed', models.BooleanField(default=False, editable=False, verbose_name='Closed')),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='periods', to='resources.resource', verbose_name='Resource')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='periods', to='resources.unit', verbose_name='Unit')),
            ],
            options={
                'verbose_name': 'period',
                'verbose_name_plural': 'periods',
            },
        ),
        migrations.CreateModel(
            name='EquipmentCategory',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipmentcategory_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipmentcategory_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
            ],
            options={
                'verbose_name': 'equipment category',
                'verbose_name_plural': 'equipment categories',
            },
        ),
        migrations.CreateModel(
            name='EquipmentAlias',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('language', models.CharField(choices=[('de', 'Deutsch'), ('en', 'Englisch')], default='de', max_length=3)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipmentalias_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aliases', to='resources.equipment')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipmentalias_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
            ],
            options={
                'verbose_name': 'equipment alias',
                'verbose_name_plural': 'equipment aliases',
            },
        ),
        migrations.AddField(
            model_name='equipment',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipment', to='resources.equipmentcategory', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipment_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipment_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by'),
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], verbose_name='Weekday')),
                ('opens', models.TimeField(blank=True, null=True, verbose_name='Time when opens')),
                ('closes', models.TimeField(blank=True, null=True, verbose_name='Time when closes')),
                ('length', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, db_index=True, null=True, verbose_name='Range between opens and closes')),
                ('closed', models.BooleanField(default=False, null=True, verbose_name='Closed')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='description')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='days', to='resources.period', verbose_name='Period')),
            ],
            options={
                'verbose_name': 'day',
                'verbose_name_plural': 'days',
            },
        ),
        migrations.CreateModel(
            name='UnitIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('namespace', models.CharField(max_length=50, verbose_name='Namespace')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='resources.unit', verbose_name='Unit')),
            ],
            options={
                'verbose_name': 'unit identifier',
                'verbose_name_plural': 'unit identifiers',
                'unique_together': {('namespace', 'unit'), ('namespace', 'value')},
            },
        ),
        migrations.CreateModel(
            name='UnitAuthorization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', enumfields.fields.EnumField(enum=checkin.resources.enums.UnitAuthorizationLevel, max_length=50, verbose_name='authorization level')),
                ('authorized', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_authorizations', to=settings.AUTH_USER_MODEL, verbose_name='authorized user')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authorizations', to='resources.unit', verbose_name='subject of the authorization')),
            ],
            options={
                'verbose_name': 'unit authorization',
                'verbose_name_plural': 'unit authorizations',
                'unique_together': {('authorized', 'subject', 'level')},
            },
        ),
        migrations.CreateModel(
            name='UnitAccessibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shortage_count', models.IntegerField(verbose_name='Accessibility shortage count')),
                ('order', models.IntegerField(verbose_name='Resource ordering priority')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Time of modification')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accessibility_summaries', to='resources.unit', verbose_name='Resource')),
                ('value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.accessibilityvalue', verbose_name='Accessibility summary value')),
                ('viewpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_accessibility_summaries', to='resources.accessibilityviewpoint', verbose_name='Resource Accessibility')),
            ],
            options={
                'verbose_name': 'unit accessibility summary',
                'verbose_name_plural': 'unit accessibility summaries',
                'ordering': ('id',),
                'unique_together': {('viewpoint', 'unit')},
            },
        ),
        migrations.CreateModel(
            name='ResourceDailyOpeningHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open_between', django.contrib.postgres.fields.ranges.DateTimeRangeField()),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opening_hours', to='resources.resource')),
            ],
            options={
                'unique_together': {('resource', 'open_between')},
            },
        ),
        migrations.CreateModel(
            name='ResourceAccessibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shortage_count', models.IntegerField(verbose_name='Accessibility shortage count')),
                ('order', models.IntegerField(verbose_name='Resource ordering priority')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Time of modification')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accessibility_summaries', to='resources.resource', verbose_name='Resource')),
                ('value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.accessibilityvalue', verbose_name='Accessibility summary value')),
                ('viewpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_accessibility_summaries', to='resources.accessibilityviewpoint', verbose_name='Resource Accessibility')),
            ],
            options={
                'verbose_name': 'resource accessibility summary',
                'verbose_name_plural': 'resource accessibility summaries',
                'ordering': ('id',),
                'unique_together': {('viewpoint', 'resource')},
            },
        ),
    ]
