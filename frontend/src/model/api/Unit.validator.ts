/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv from 'ajv';
import Unit from './Unit';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));


export const UnitSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "properties": {
    "name": {
      "type": "string"
    },
    "slug": {
      "type": "string"
    },
    "uuid": {
      "type": "string"
    }
  },
  "required": [
    "name",
    "slug",
    "uuid"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isUnit = ajv.compile(UnitSchema) as ValidateFunction<Unit>;
export default function validate(value: unknown): Unit {
  if (isUnit(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isUnit.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Unit'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
