/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv from 'ajv';
import KeycardInfo from './KeycardInfo';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));


export const KeycardInfoSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "properties": {
    "not_synced_permission_count": {
      "type": "number"
    },
    "number": {
      "type": [
        "null",
        "string"
      ]
    },
    "permissions_last_modified_at": {
      "anyOf": [
        {
          "description": "Enables basic storage and retrieval of dates and times.",
          "format": "date-time",
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "permissions_last_synced_at": {
      "anyOf": [
        {
          "description": "Enables basic storage and retrieval of dates and times.",
          "format": "date-time",
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "requested_at": {
      "anyOf": [
        {
          "description": "Enables basic storage and retrieval of dates and times.",
          "format": "date-time",
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "synced_permission_count": {
      "type": "number"
    },
    "total_permission_count": {
      "type": "number"
    }
  },
  "required": [
    "not_synced_permission_count",
    "number",
    "permissions_last_modified_at",
    "permissions_last_synced_at",
    "requested_at",
    "synced_permission_count",
    "total_permission_count"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isKeycardInfo = ajv.compile(KeycardInfoSchema) as ValidateFunction<KeycardInfo>;
export default function validate(value: unknown): KeycardInfo {
  if (isKeycardInfo(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isKeycardInfo.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'KeycardInfo'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
