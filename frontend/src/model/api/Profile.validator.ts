/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv from 'ajv';
import Profile from './Profile';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export const ProfileSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "Pick<default,\"id\"|\"time_entered\"|\"time_left\"|\"location\"|\"is_active\">": {
      "defaultProperties": [
      ],
      "properties": {
        "id": {
          "type": "number"
        },
        "is_active": {
          "type": "boolean"
        },
        "location": {
          "$ref": "#/definitions/default"
        },
        "time_entered": {
          "type": "string"
        },
        "time_left": {
          "type": [
            "null",
            "string"
          ]
        }
      },
      "required": [
        "id",
        "is_active",
        "location",
        "time_entered",
        "time_left"
      ],
      "type": "object"
    },
    "default": {
      "defaultProperties": [
      ],
      "properties": {
        "capacity": {
          "type": "number"
        },
        "code": {
          "type": "string"
        },
        "id": {
          "type": "number"
        },
        "load": {
          "type": "number"
        },
        "org_name": {
          "type": "string"
        },
        "org_number": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/default"
        }
      },
      "required": [
        "capacity",
        "code",
        "id",
        "load",
        "org_name",
        "org_number",
        "parent"
      ],
      "type": "object"
    }
  },
  "properties": {
    "first_name": {
      "type": "string"
    },
    "id": {
      "type": "number"
    },
    "last_checkins": {
      "items": {
        "$ref": "#/definitions/Pick<default,\"id\"|\"time_entered\"|\"time_left\"|\"location\"|\"is_active\">"
      },
      "type": "array"
    },
    "last_name": {
      "type": "string"
    },
    "phone": {
      "type": "string"
    },
    "verified": {
      "type": "boolean"
    }
  },
  "required": [
    "first_name",
    "id",
    "last_checkins",
    "last_name",
    "phone",
    "verified"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isProfile = ajv.compile(ProfileSchema) as ValidateFunction<Profile>;
export default function validate(value: unknown): Profile {
  if (isProfile(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isProfile.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Profile'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
