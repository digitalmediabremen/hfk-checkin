/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util";
import Ajv from "ajv";
import NewReservationValidation from "./NewReservationValidationFixLater";
export const ajv = new Ajv({
    allErrors: true,
    coerceTypes: false,
    format: "fast",
    nullable: true,
    unicode: true,
    uniqueItems: true,
    useDefaults: true,
});

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));

export const NewReservationValidationSchema = {
    $schema: "http://json-schema.org/draft-07/schema#",
    definitions: {
        ValidationLevel: {
            enum: ["notice", "warning"],
            type: "string",
        },
        ValidationObject: {
            defaultProperties: [],
            properties: {
                context: {
                    items: {
                        enum: ["access", "capacity", "datetime", "resource"],
                        type: "string",
                    },
                    type: "array",
                },
                detail: {
                    type: "string",
                },
                level: {
                    $ref: "#/definitions/ValidationLevel",
                },
                type: {
                    $ref: "#/definitions/ValidationType",
                },
            },
            required: ["detail", "level", "type"],
            type: "object",
        },
        ValidationType: {
            enum: [
                "ReservationAvailabilityWarning",
                "ReservationCapacityCriticalWarning",
                "ReservationCapacityNotice",
                "ReservationCapacityWarning",
                "ReservationCollisionWarning",
                "ReservationCriticalWarning",
                "ReservationNotice",
                "ReservationPermissionCriticalWarning",
                "ReservationPermissionWarning",
                "ReservationTimingWarning",
                "ReservationWarning",
            ],
            type: "string",
        },
    },
    items: {
        $ref: "#/definitions/ValidationObject",
    },
    type: "array",
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
    Pick<Ajv.ValidateFunction, "errors">;
export const isNewReservationValidation = ajv.compile(
    NewReservationValidationSchema
) as ValidateFunction<NewReservationValidation>;
export default function validate(value: unknown): NewReservationValidation {
    if (isNewReservationValidation(value)) {
        return value;
    } else {
        throw new Error(
            ajv.errorsText(
                isNewReservationValidation.errors!.filter(
                    (e: any) => e.keyword !== "if"
                ),
                { dataVar: "NewReservationValidation" }
            ) +
                "\n\n" +
                inspect(value)
        );
    }
}
